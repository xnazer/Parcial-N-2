#include <iostream>
#include <vector>
#include <algorithm>
#include <random>

#define BG_RED "\x1B[41m"
#define BG_BLUE "\x1B[44m"
#define BG_BLACK "\x1B[40m"
#define BG_GREEN "\x1B[42m"
#define WHITE "\x1B[37m"
#define RESET "\x1b[0m"

using namespace std;

class Carta {
public:
    string paleta[4] = {BG_RED, BG_BLUE, BG_BLACK, BG_GREEN};
    int poder = 0;
    int color = 0;
    Carta() {};
    Carta(int p, int c);
    void mostrar();
};

Carta::Carta(int p, int c) {
    color = c;
    poder = p;
}

void Carta::mostrar() {
    cout << WHITE << paleta[color] << poder << RESET << " ";
}

class Mazo {
public:
    vector<Carta> cartas;

    Mazo();
    void barajar();
    Carta repartir();
    void mostrar();
};

Mazo::Mazo() {
    cartas.resize(36);
    int indice = 0;

    for (int i = 1; i <= 9; i++) {
        for (int j = 0; j < 4; j++) {
            cartas[indice++] = Carta(i, j);
        }
    }
    barajar();
}

void Mazo::barajar() {
    int idUno;
    int idDos;

    for (int i = 0; i < 25; i++) {
        idUno = rand() % cartas.size();
        idDos = rand() % cartas.size();
        swap(cartas[idUno], cartas[idDos]);
    }
}

Carta Mazo::repartir() {
    int indice = rand() % cartas.size();
    Carta ca = cartas[indice];
    cartas.erase(cartas.begin() + indice);
    return ca;
}

void Mazo::mostrar() {
    int indice = 0;
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 4; j++) {
            indice = (4 * i) + j;
            cartas[indice].mostrar();
        }
    }
}

class Mano {
public:
    vector<Carta> cartas;

    Mano() {}
    Mano(int cantidad, vector<Carta>& mazo);
    void mostrar();
    Carta lanzar(int ncartas);
};

Mano::Mano(int cantidad, vector<Carta>& mazo) {
    for (int i = 0; i < cantidad; i++) {
        cartas.push_back(mazo.back());
        mazo.pop_back();
    }
}

void Mano::mostrar() {
    for (size_t i = 0; i < cartas.size(); i++) {
        cout << i + 1 << ". ";
        cartas[i].mostrar();
    }
    cout << endl;
}

Carta Mano::lanzar(int ncartasd) {
    Carta cs = cartas[ncartasd];
    cartas.erase(cartas.begin() + ncartasd);
    return cs;
}

class Jugador {
public:
    int id;
    Mano mano;
    vector<Carta> boveda;  // Acumula las cartas ganadas en la bóveda
    Jugador(int i, int cantidadCartas, vector<Carta>& mazo);
    void mostrarMano();
    void almacenarCarta(Carta c);
    int contarCartasBoveda();
    void mostrarBoveda();
};

Jugador::Jugador(int i, int cantidadCartas, vector<Carta>& mazo) {
    this->id = i;
    this->mano = Mano(cantidadCartas, mazo);
}

void Jugador::mostrarMano() {
    cout << "Jugador " << id << " - Mano: ";
    mano.mostrar();
}

void Jugador::almacenarCarta(Carta c) {
    boveda.push_back(c);  // Se almacena la carta en la bóveda
}

int Jugador::contarCartasBoveda() {
    return boveda.size();
}

void Jugador::mostrarBoveda() {
    cout << "Bóveda del Jugador " << id << " (" << contarCartasBoveda() << " cartas): ";
    for (Carta c : boveda) {
        c.mostrar();
    }
    cout << endl;
}

class Batalla {
public:
    int colorInicial = -1;
    vector<pair<Jugador*, Carta>> cartasLanzadas;

    void iniciarRonda();
    void comparar(Jugador& jugador, Carta carta);
    Jugador* definirGanadorRonda();
};

void Batalla::iniciarRonda() {
    cartasLanzadas.clear();
    colorInicial = -1;
}

void Batalla::comparar(Jugador& jugador, Carta carta) {
    if (cartasLanzadas.empty()) {
        colorInicial = carta.color;
    }
    cartasLanzadas.push_back({&jugador, carta});
}

Jugador* Batalla::definirGanadorRonda() {
    if (cartasLanzadas.empty()) {
        return 0;
    }

    Jugador* ganador = 0;
    int maxP = 0;

    for (size_t i = 0; i < cartasLanzadas.size(); i++) {
        Jugador* jugadorActual = cartasLanzadas[i].first;
        Carta cartaActual = cartasLanzadas[i].second;

        if (cartaActual.color == colorInicial && cartaActual.poder > maxP) {
            maxP = cartaActual.poder;
            ganador = jugadorActual;
        }
    }

    return ganador;
}

class Juego {
public:
    vector<Jugador> jugadores;
    Batalla btla;
    Mazo mazo;
    int numJugadores;

    Juego(int n);
    void jugar();
    void determinarGanador();
};

Juego::Juego(int n) {
    this->numJugadores = n;
    this->mazo = mazo;
    int cartasPorJugador = 36 / n;
    for (int i = 0; i < n; i++) jugadores.push_back(Jugador(i + 1, cartasPorJugador, mazo.cartas));
}

void Juego::jugar() {
    cout << "Número de rondas a jugar: 5" << endl;
    for (int ronda = 0; ronda < 5; ronda++) {
        cout << "\n--- Ronda " << ronda + 1 << " ---\n";
        btla.iniciarRonda();

        for (Jugador& player : jugadores) {
            player.mostrarMano();
            int escoger;
            cout << "Jugador " << player.id << ", ¿Qué carta desea tirar? (1 a " << player.mano.cartas.size() << "): ";
            cin >> escoger;
            escoger--;  // Ajustamos el índice para que empiece desde 0
            Carta cartaLanzada = player.mano.lanzar(escoger);
            btla.comparar(player, cartaLanzada);
        }

        Jugador* ganador = btla.definirGanadorRonda();
        if (ganador) {
            cout << "El ganador de la ronda es el Jugador " << ganador->id << endl;
            // El jugador ganador almacena la carta ganada en su bóveda
            for (auto& lanzada : btla.cartasLanzadas) {
                if (lanzada.first == ganador) {
                    ganador->almacenarCarta(lanzada.second);
                }
            }
        } else {
            cout << "No hubo ganador en esta ronda" << endl;
        }
    }

    // Determinar y mostrar el ganador del juego basado en las cartas acumuladas en la bóveda
    determinarGanador();
}

void Juego::determinarGanador() {
    Jugador* ganador = &jugadores[0];
    for (Jugador& jugador : jugadores) {
        if (jugador.contarCartasBoveda() > ganador->contarCartasBoveda()) {
            ganador = &jugador;
        }
    }

    cout << "\n--- El ganador del juego es el Jugador " << ganador->id << " con " << ganador->contarCartasBoveda() << " cartas acumuladas en su bóveda! ---" << endl;
}

int main() {
    int nJugadores;
    do {
        cout << "Ingrese el número de jugadores (2, 3 o 4): ";
        cin >> nJugadores;
    } while (nJugadores < 2 || nJugadores > 4);

    Juego juego(nJugadores);
    juego.jugar();

    return 0;
}
